私の指示に従い、djangoのmodels.pyのコードを実装又は修正してください。
[概要]
プロジェクト管理アプリのmodelsです。
プロジェクト＞フェーズ＞ユニット＞タスクの関係です。
プロジェクトメンバーは、アプリに登録しているユーザーがプロジェクトに参加すると追加されるモデルです。
タスクアサインメントはプロジェクトメンバーがタスクにアサインされると追加されるモデルです。
・プロジェクト
・プロジェクトメンバー
・フェーズ
・ユニット
・タスク
・タスクアサインメント

[指示]
・プロジェクト、メンバー、フェーズ、ユニットは大枠は変えずに、理解しやすくしてください。
・タスクはアサインメンバーが存在する時は現在の処理、メンバーが存在しなかったら作成者がメンバーになります。


データベースの作成フロー
プロジェクトの作成（作成者ユーザーはプロジェクトメンバーへ）
↓
プロジェクトの参加（ほかのユーザーがプロジェクト招待IDを受け取り、プロジェクトへの参加）
↓
フェーズの作成（メンバーなら可能）
↓
ユニットの作成（メンバーなら可能）
↓
タスクの作成（メンバーなら可能、プロジェクトメンバーの中からアサインメンバーを選択、空白も可能。）

タスク完了フロー
アサインメンバーが一人の場合
メンバーのタスクの完了
↓
タスク完了
↓
全てのタスクの完了
↓
そのユニットの完了
↓
全てのユニットの完了
↓
フェーズの完了
↓
全てのフェーズの完了
↓
プロジェクトの完了

アサインメンバーが複数
ここのメンバーがタスクを完了
↓
アサインメンバー全員のタスクの完了確認
↓
タスクの完了
↓
そのユニットの完了
↓
全てのユニットの完了
↓
フェーズの完了
↓
全てのフェーズの完了
↓
プロジェクトの完了


各モデルの解説
[UserManager]
ユーザーの作成とかのやつを書いてるよ
[User]
AbstractBaseUserを継承している。
usernameとpasswordのフィールドは事前に用意されている
自分で定義するのは
lastname,firstname(未実装)
active 現在アクティブかどうか確認
staff　スタッフかどうか確認
admin　管理者どうか確認
UserManagerをインスタンス化してobjects
ユーザーの作成や保存などを執り行う。

[Project]
project_name:プロジェクト名のフィールド
project_description：プロジェクトの説明
project_kind：プロジェクトの種類
responsible：プロジェクト責任者用のユーザーとの外部キー（必須だが後から変更できるようにしたい）
priority：優先度１が一番優先度が高い
invitation_id：招待IDを入れる場所30文字くらいがいいかな？
dead_line：プロジェクトの締め切りを入れる日付フィールド
created_at：作成日
updated_at：更新日
is_completed_project：プロジェクトが完了した稼働が、デフォルトはfalse 

save()メソッドは、モデルの保存前に実行されるメソッドです。
super().save(*args, **kwargs)を呼び出して、
親クラスのsave()メソッドを実行します。
*argsおよび**kwargsはPythonの特殊な構文で、関数やメソッドの引数を柔軟に受け取るために使用されます。

*argsは位置引数（positional arguments）をタプルとして受け取ります。
これにより、可変長の位置引数を関数に渡すことができます。argsは"arguments"の略です。
**kwargsはキーワード引数（keyword arguments）を辞書として受け取ります。
これにより、可変長のキーワード引数を関数に渡すことができます。kwargsは"keyword arguments"の略です。
self.pkは、モデルのプライマリーキー（Primary Key）を表す属性です。
プライマリーキーは、データベース内の各レコードを一意に特定するための識別子です。pkは"primary key"の略です。


phases変数に関連するフェーズ（プロジェクトのタスクの一部）を取得します。
プロジェクトに関連するフェーズが存在しない場合、
またはフェーズが存在し、かつ未完了のフェーズが存在しない場合、
is_completed_projectをTrueに設定します。
それ以外の場合、is_completed_projectをFalseに設定します。
self.__class__.objects.filter(pk=self.pk).update(is_completed_project=self.is_completed_project)を使用して、
データベース内のプロジェクトの完了状態を更新します。
このようにして、Projectモデルはプロジェクトの情報を格納し、プロジェクトが完了したかどうかを自動的に判定します。

[ProjectMember]
PROJECT_ROLE_CHOICES: 
プロジェクトメンバーの役割を選択するための選択肢のタプルです。
役割の選択肢として、
"マネージャー"、"ワーカー"、"ステークホルダー"
の3つの選択肢が定義されています。
user:
Userモデルへの外部キーとして、
プロジェクトメンバーのユーザーを参照します。
project: 
Projectモデルへの外部キーとして、
プロジェクトメンバーが所属するプロジェクトを参照します。
role: 
プロジェクトメンバーの役割を表す文字列フィールドです
。PROJECT_ROLE_CHOICESで定義された選択肢から選択します。
status:
ユーザーの参加状態を記録するフィールド
申請中：参加申請が行われて、参加が許可されるまでの間の状態
参加済み：参加申請が許可された場合やそのプロジェクトの作成者（責任者）はデフォルトで参加済みになる
created_at: 
レコードの作成日時を表す日時フィールドで、
新しいレコードが作成されるたびに自動的に設定されます。
updated_at: 
レコードの最終更新日時を表す日時フィールドで、
レコードが保存されるたびに自動的に更新されます。

[Phase]
phase_name:
フェーズの名前を表す文字列フィールド。
phase_description:
フェーズの説明を表すテキストフィールド。
project:
Projectモデルへの外部キーとして、
フェーズが属するプロジェクトを参照します。
related_nameは、逆参照を行う際の名前を指定します。
start_day:
フェーズの開始日を表す日付フィールド。
dead_line:
フェーズの締め切り日を表す日付フィールド。
is_completed_phase:
フェーズの完了状態を表すブールフィールドで、
デフォルト値はFalseです。
created_at:
レコードの作成日時を表す日時フィールド。新しいレコードが作成されるたびに自動的に設定されます。
updated_at:
レコードの最終更新日時を表す日時フィールド。レコードが保存されるたびに自動的に更新されます。
save()メソッドは、モデルの保存前に実行されるメソッドです。
この場合、save()メソッドは次のことを行います:
super().save(*args, **kwargs)を呼び出して、親クラスのsave()メソッドを実行します。
units変数に関連するユニット（フェーズのタスクの一部）を取得します。
フェーズに関連するユニットが存在しない場合、またはユニットが存在し、かつ未完了のユニットが存在しない場合、is_completed_phaseをTrueに設定します。それ以外の場合、is_completed_phaseをFalseに設定します。
self.__class__.objects.filter(pk=self.pk).update(is_completed_phase=self.is_completed_phase)を使用して、データベース内のフェーズの完了状態を更新します。
このようにして、Phaseモデルはフェーズの情報を格納し、フェーズが完了したかどうかを自動的に判定します。
self.__class__.objects.filter(pk=self.pk).update(is_completed_phase=self.is_completed_phase)は、同じクラスに属する他のオブジェクトをクエリして更新するためのDjangoのORM（Object-Relational Mapping）の機能を使用しています。

self.__class__は、オブジェクトが属しているクラス（この場合はPhaseクラス）への参照です。
objectsは、クラスのマネージャーオブジェクトです。Djangoのモデルでは、objectsという名前のデフォルトのマネージャーが提供されます。
filter(pk=self.pk)は、プライマリーキーがself.pkと一致するオブジェクトをクエリします。
update(is_completed_phase=self.is_completed_phase)は、クエリセットに対して指定したフィールドの値を一括で更新します。この場合、is_completed_phaseフィールドの値をself.is_completed_phaseに更新します。
つまり、self.__class__.objects.filter(pk=self.pk).update(is_completed_phase=self.is_completed_phase)は、同じクラスの他のオブジェクトのis_completed_phaseフィールドを現在のオブジェクトの値で更新するために使用されます。

[Unit]
unit_name:
タスクの名前を表す文字列フィールド。
unit_description:
タスクの説明を表すテキストフィールド。
phase:
Phaseモデルへの外部キーとして、タスクが属するフェーズを参照します。
related_nameは、逆参照を行う際の名前を指定します。
start_day:
タスクの開始日を表す日付フィールド。
dead_line:
タスクの締め切り日を表す日付フィールド。
is_completed_unit:
タスクの完了状態を表すブールフィールドで、デフォルト値はFalseです。
created_at:
レコードの作成日時を表す日時フィールド。新しいレコードが作成されるたびに自動的に設定されます。
updated_at:
レコードの最終更新日時を表す日時フィールド。レコードが保存されるたびに自動的に更新されます。
[Task]
task_name:
タスクの名前を表す文字列フィールド。
task_description:
タスクの説明を表すテキストフィールド。
unit:
Unitモデルへの外部キーとして、タスクが属するユニットを参照します。
related_nameは、逆参照を行う際の名前を指定します。
start_day:
タスクの開始日を表す日付フィールド。
dead_line:
タスクの締め切り日を表す日付フィールド。
is_completed_task:
タスクの完了状態を表すブールフィールドで、デフォルト値はFalseです。
created_at:
レコードの作成日時を表す日時フィールド。
新しいレコードが作成されるたびに自動的に設定されます。
updated_at:レコードの最終更新日時を表す日時フィールド。
レコードが保存されるたびに自動的に更新されます。
[TaskAssignment]
task: 
Taskモデルへの外部キーとして、タスクを参照します。
related_nameは、逆参照を行う際の名前を指定します。
project_member: 
ProjectMemberモデルへの外部キーとして、
プロジェクトメンバーを参照します。
is_completed_member: 
タスク割り当ての完了状態を表すブールフィールドで、デフォルト値はFalseです。
created_at: 
レコードの作成日時を表す日時フィールド。新しいレコードが作成されるたびに自動的に設定されます。
updated_at: 
レコードの最終更新日時を表す日時フィールド。レコードが保存されるたびに自動的に更新されます。
