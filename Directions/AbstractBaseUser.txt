Djangoの`AbstractBaseUser`は、カスタムユーザーモデルを作成する際に使用される抽象ベースクラスです。このクラスを継承することで、カスタムのユーザーモデルを作成することができます。

`AbstractBaseUser`を継承すると、以下の機能が事前に準備されます:

1. ユーザー名とパスワードのフィールド: `username`と`password`という2つのフィールドが提供されます。これらのフィールドは、ユーザーの認証情報を保存するために使用されます。

2. 必要なメソッド: `AbstractBaseUser`は、いくつかの必須メソッドを定義しています。これらのメソッドは、カスタムユーザーモデルに実装する必要があります。例えば、`get_username()`メソッドは、ユーザーのユーザー名を返す必要があります。

3. 認証バックエンドのサポート: `AbstractBaseUser`は、カスタムユーザーモデルに対する認証バックエンドのサポートを提供します。これにより、ユーザーの認証やセッション管理などの機能を簡単に組み込むことができます。

4. グループとパーミッションのサポート: `AbstractBaseUser`は、Djangoの標準的なグループとパーミッションのサポートを提供します。これにより、ユーザーに対して特定のアクセス権を設定したり、グループにユーザーを追加したりすることができます。

ただし、`AbstractBaseUser`は抽象クラスなので、直接使用することはできません。`AbstractBaseUser`を継承したカスタムの具象ユーザーモデルを作成し、そのモデルをDjangoの設定に指定する必要があります。具体的な実装の詳細や使い方は、Djangoの公式ドキュメントを参照することをおすすめします。


`BaseUserManager`は、Djangoのカスタムユーザーモデルと組み合わせて使用するためのユーザーマネージャーの抽象ベースクラスです。`AbstractBaseUser`と組み合わせて使用することで、カスタムのユーザーモデルを作成および操作するための便利なメソッドを提供します。

`BaseUserManager`を継承すると、以下の機能が提供されます:

1. ユーザーの作成と保存: `create_user()`メソッドを使用して新しいユーザーを作成し、`save()`メソッドを使用してデータベースに保存することができます。これにより、ユーザーの作成と保存の手続きが簡素化されます。

2. スーパーユーザーの作成と保存: `create_superuser()`メソッドを使用して新しいスーパーユーザーを作成し、`save()`メソッドを使用してデータベースに保存することができます。スーパーユーザーは通常、システムの管理者や特権ユーザーとして使用されます。

3. パスワードのハッシュ化と検証: `BaseUserManager`は、パスワードのハッシュ化と検証のためのメソッドも提供します。`make_password()`メソッドを使用してパスワードをハッシュ化し、`check_password()`メソッドを使用してユーザーが提供したパスワードを検証することができます。

4. カスタムフィールドの処理: `BaseUserManager`は、ユーザーモデルに追加したカスタムフィールドの処理もサポートします。例えば、電子メールアドレスや追加のプロフィール情報などのカスタムフィールドをユーザーモデルに追加する場合、`BaseUserManager`を使用してこれらのフィールドを操作することができます。

`BaseUserManager`をカスタムのユーザーマネージャークラスで継承し、必要に応じてメソッドをオーバーライドしてカスタマイズすることができます。これにより、ユーザーモデルに特定のロジックや振る舞いを追加することができます。